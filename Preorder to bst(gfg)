#User function Template for python3

class Node:

    def __init__(self, data=0):
        self.data = data
        self.left = None
        self.right = None

#Function that constructs BST from its preorder traversal.
def post_order(pre, size) -> Node:
    if(size==0):
        return None
    root_node=Node(pre[0])
    small_arr=[]
    big_arr=[]
    createarr(pre,small_arr,big_arr)
    root_node.left=post_order(small_arr,len(small_arr))
    root_node.right=post_order(big_arr,len(big_arr))
    return root_node

def createarr(arr,small_arr,big_arr):
    for i in range(1,len(arr)):
        if(arr[i]<arr[0]):
            small_arr.append(arr[i])
        else:
            big_arr.append(arr[i])
#code here


#{ 
 # Driver Code Starts
#Initial Template for Python 3

#contributed by RavinderSinghPB
class Node:
    def __init__(self, data=0):
        self.data = data
        self.left = None
        self.right = None

def postOrd(root):
    if not root:
        return
    postOrd(root.left)
    postOrd(root.right)
    print(root.data,end=' ')

if __name__ == '__main__':
    t=int(input())

    for _tcs in range(t):
        size=int(input())
        pre=[int(x)for x in input().split()]

        root=post_order(pre,size)

        postOrd(root)
        print()
# } Driver Code Ends
